image: "haskell:8.6.5"

stages:
  - build
  - lint
  - test

variables:
    STACK_ROOT: "${CI_PROJECT_DIR}/.stack"
    LD_LIBRARY_PATH: "${CI_PROJECT_DIR}/crypto/rust-src/target/release:${CI_PROJECT_DIR}/globalstate-mockup/globalstate-rust/target/release:$LD_LIBRARY_PATH"
    GIT_SUBMODULE_STRATEGY: recursive
cache:
  paths:
    - .stack
    - .stack-work
    - target

.generic:
  variables:
    RUSTFLAGS: -Dwarnings
    GIT_SUBMODULE_STRATEGY: recursive
    LD_LIBRARY_PATH: "${CI_PROJECT_DIR}/external-libs:$LD_LIBRARY_PATH"
  cache: 
    policy: pull

.generic-lint:
  extends: .generic

"stack:build":
  stage: build
  artifacts:
    expire_in: 1 hour
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - external-libs/
  script:
    - "apt-get update && apt-get install -y moreutils curl"
    - "git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/.insteadOf ssh://git@gitlab.com:22/"
    - "curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable"
    - "source $HOME/.cargo/env"
    - "./build-deps.sh"
    - "stack build -v --ghc-options -j4 | ts '[%Y-%m-%d %H:%M:%.S]'"
    #- "stack test -v | ts '[%Y-%m-%d %H:%M:%.S]'"
    - consensus-rust/scripts/setup-ci.sh

"stack:test":
  extends: .generic
  stage: test
  script:
    - "apt-get update && apt-get install -y moreutils curl"
    - "git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/.insteadOf ssh://git@gitlab.com:22/"
    - "curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable"
    - "source $HOME/.cargo/env"
    - "stack test -v | ts '[%Y-%m-%d %H:%M:%.S]'"

"lint:fmt":
  extends: .generic-lint
  stage: lint
  image: rustlang/rust:nightly
  dependencies: []
  before_script:
    - rustup default nightly-2019-07-25
    - rustup component add rustfmt
  script:
    - rustc --version && cargo --version
    - ( cd consensus-rust && cargo fmt -- --color=always)
    - test $(git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | wc -l) -eq 0 || (echo 'You have introduced some unformatted code:'; git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | sed 's/^/* /'; echo 'Please run `cargo fmt` and amend your MR.'; exit 1)

"cargo:test":
  extends: .generic
  stage: test
  script:
    - "apt-get update && apt-get install -y moreutils curl"
    - git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/.insteadOf ssh://git@gitlab.com:22/
    - "curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable"
    - "source $HOME/.cargo/env"
    - rustc --version && cargo --version
    - echo "Running tests without extra features"
    - ( cd globalstate-mockup/globalstate-rust && cargo test --all --color=always )
    - ( cd consensus-rust && cargo test --all --color=always )

"lint:clippy":
  extends: .generic-lint
  stage: lint
  script:
    - "apt-get update && apt-get install -y moreutils curl"
    - git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/.insteadOf ssh://git@gitlab.com:22/
    - "curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable"
    - "source $HOME/.cargo/env"
    - rustc --version && cargo --version
    - rustup component add clippy
    - echo "Running clippy with without extra features"
    - ( cd consensus-rust && cargo clippy --color=always --all -- -Dclippy::all )
    - ( cd globalstate-mockup/globalstate-rust && cargo clippy --color=always --all -- -Dclippy::all )