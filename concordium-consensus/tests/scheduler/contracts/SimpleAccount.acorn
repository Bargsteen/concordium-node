module SimpleAccount where

import Prod
import Maybe
import Prim
import Unit
import Blockchain

contract Account where

  init (ia :: Unit.Unit) (c :: Blockchain.InitContext) (addr :: {address}) (amount :: Amount) =
    ia

  receive (c :: Blockchain.ReceiveContext) (model :: Unit.Unit) (caller :: Blockchain.Caller) (amount :: Amount) (msg :: Maybe.Maybe Unit.Unit) =
    case msg of
      Maybe.Nothing -> Prod.Pair [Unit.Unit] [Prim.Transaction] model Prim.TxNone
      Maybe.Just msg' -> Prod.Pair [Unit.Unit] [Prim.Transaction] model Prim.TxReject
